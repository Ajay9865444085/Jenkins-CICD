pipeline {
  agent {
    docker {
      image 'ajay3502/maven-jdk17-dockercli'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access host's Docker daemon
    }
  }
  environment {
    GIT_REPO_NAME = "Jenkins-CICD"
    GIT_USER_NAME = "Ajay9865444085"
    SONAR_URL = "http://34.210.128.162:9000"
    DOCKER_IMAGE_BASE = "ajay3502/ultimate-cicd"
  }
  stages {
    stage('Checkout') {
      steps {
        // Checkout your source code
        checkout scm
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            java -version
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn clean verify org.jacoco:jacoco-maven-plugin:prepare-agent install \
              sonar:sonar \
              -Dsonar.projectKey=spring-boot-demo \
              -Dsonar.host.url=${SONAR_URL} \
              -Dsonar.login=${SONAR_AUTH_TOKEN} \
              -Dsonar.java.binaries=target/classes \
              -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
          '''
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "${DOCKER_IMAGE_BASE}:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} ."
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            if [ -d Jenkins-CICD ]; then
              cd Jenkins-CICD
              git pull origin main
            else
              git clone https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git
              cd Jenkins-CICD
            fi

            git config user.email "ajayperumal14@gmail.com"
            git config user.name "${GIT_USER_NAME}"

            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"

            git push origin main
          '''
        }
      }
    }
  }
}
