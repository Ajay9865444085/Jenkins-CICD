pipeline {
  agent {
    docker {
     image 'ajay3502/maven-jdk17-dockercli'
    args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://35.91.136.179:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
     sh '''
  java -version
  cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
  # Run tests and generate coverage report
        mvn clean verify org.jacoco:jacoco-maven-plugin:prepare-agent install \
          sonar:sonar \
          -Dsonar.projectKey=spring-boot-demo \
          -Dsonar.host.url=${SONAR_URL} \
          -Dsonar.login=${SONAR_AUTH_TOKEN} \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
'''

        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "ajay3502/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
           sh "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} ."
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
  environment {
    GIT_REPO_NAME = "Jenkins-CICD"
    GIT_USER_NAME = "Ajay9865444085"
  }
  steps {
    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
      sh """
        # Clone your repo using the GitHub token for authentication
        git clone https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git
        
        # Move into the cloned repo folder
        cd ${GIT_REPO_NAME}
        
        # Set git user details
        git config user.email "ajayperumal14@gmail.com"
        git config user.name "${GIT_USER_NAME}"
        
        # Replace image tag in deployment file
        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
        
        # Stage the changed file
        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
        
        # Commit changes with message
        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
        
        # Push to main branch
        git push origin main
      """
    }
  }
}

  }
}
